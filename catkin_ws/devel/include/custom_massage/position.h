// Generated by gencpp from file custom_massage/position.msg
// DO NOT EDIT!


#ifndef CUSTOM_MASSAGE_MESSAGE_POSITION_H
#define CUSTOM_MASSAGE_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_massage
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : massage()
    , x_position(0.0)
    , y_position(0.0)  {
    }
  position_(const ContainerAllocator& _alloc)
    : massage(_alloc)
    , x_position(0.0)
    , y_position(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _massage_type;
  _massage_type massage;

   typedef float _x_position_type;
  _x_position_type x_position;

   typedef float _y_position_type;
  _y_position_type y_position;





  typedef boost::shared_ptr< ::custom_massage::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_massage::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::custom_massage::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::custom_massage::position > positionPtr;
typedef boost::shared_ptr< ::custom_massage::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_massage::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_massage::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_massage::position_<ContainerAllocator1> & lhs, const ::custom_massage::position_<ContainerAllocator2> & rhs)
{
  return lhs.massage == rhs.massage &&
    lhs.x_position == rhs.x_position &&
    lhs.y_position == rhs.y_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_massage::position_<ContainerAllocator1> & lhs, const ::custom_massage::position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_massage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_massage::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_massage::position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_massage::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_massage::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_massage::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_massage::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_massage::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea82cc84d3bb467dc1820a0e9bfb75b6";
  }

  static const char* value(const ::custom_massage::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea82cc84d3bb467dULL;
  static const uint64_t static_value2 = 0xc1820a0e9bfb75b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_massage::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_massage/position";
  }

  static const char* value(const ::custom_massage::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_massage::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string massage\n"
"float32 x_position\n"
"float32 y_position\n"
;
  }

  static const char* value(const ::custom_massage::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_massage::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.massage);
      stream.next(m.x_position);
      stream.next(m.y_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_massage::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_massage::position_<ContainerAllocator>& v)
  {
    s << indent << "massage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.massage);
    s << indent << "x_position: ";
    Printer<float>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<float>::stream(s, indent + "  ", v.y_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MASSAGE_MESSAGE_POSITION_H
