// Generated by gencpp from file msgs_1515/AutonomousStates.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_AUTONOMOUSSTATES_H
#define MSGS_1515_MESSAGE_AUTONOMOUSSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>

namespace msgs_1515
{
template <class ContainerAllocator>
struct AutonomousStates_
{
  typedef AutonomousStates_<ContainerAllocator> Type;

  AutonomousStates_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , lka_status()
    , acc_status()
    , acc_mode()
    , set_speed()
    , dm_mode()  {
    }
  AutonomousStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , lka_status(_alloc)
    , acc_status(_alloc)
    , acc_mode(_alloc)
    , set_speed(_alloc)
    , dm_mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _lka_status_type;
  _lka_status_type lka_status;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _acc_status_type;
  _acc_status_type acc_status;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _acc_mode_type;
  _acc_mode_type acc_mode;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _set_speed_type;
  _set_speed_type set_speed;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _dm_mode_type;
  _dm_mode_type dm_mode;





  typedef boost::shared_ptr< ::msgs_1515::AutonomousStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::AutonomousStates_<ContainerAllocator> const> ConstPtr;

}; // struct AutonomousStates_

typedef ::msgs_1515::AutonomousStates_<std::allocator<void> > AutonomousStates;

typedef boost::shared_ptr< ::msgs_1515::AutonomousStates > AutonomousStatesPtr;
typedef boost::shared_ptr< ::msgs_1515::AutonomousStates const> AutonomousStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::AutonomousStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::AutonomousStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::AutonomousStates_<ContainerAllocator1> & lhs, const ::msgs_1515::AutonomousStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.lka_status == rhs.lka_status &&
    lhs.acc_status == rhs.acc_status &&
    lhs.acc_mode == rhs.acc_mode &&
    lhs.set_speed == rhs.set_speed &&
    lhs.dm_mode == rhs.dm_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::AutonomousStates_<ContainerAllocator1> & lhs, const ::msgs_1515::AutonomousStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::AutonomousStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::AutonomousStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::AutonomousStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c16518f721ec6e01d4ec26824c39854c";
  }

  static const char* value(const ::msgs_1515::AutonomousStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc16518f721ec6e01ULL;
  static const uint64_t static_value2 = 0xd4ec26824c39854cULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/AutonomousStates";
  }

  static const char* value(const ::msgs_1515::AutonomousStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"std_msgs/Bool lka_status\n"
"std_msgs/Int8 acc_status\n"
"std_msgs/Int8 acc_mode\n"
"std_msgs/Int8 set_speed\n"
"std_msgs/Int8 dm_mode\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
;
  }

  static const char* value(const ::msgs_1515::AutonomousStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.lka_status);
      stream.next(m.acc_status);
      stream.next(m.acc_mode);
      stream.next(m.set_speed);
      stream.next(m.dm_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutonomousStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::AutonomousStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::AutonomousStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "lka_status: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.lka_status);
    s << indent << "acc_status: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_status);
    s << indent << "acc_mode: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_mode);
    s << indent << "set_speed: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.set_speed);
    s << indent << "dm_mode: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.dm_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_AUTONOMOUSSTATES_H
