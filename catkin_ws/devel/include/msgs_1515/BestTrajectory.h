// Generated by gencpp from file msgs_1515/BestTrajectory.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_BESTTRAJECTORY_H
#define MSGS_1515_MESSAGE_BESTTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msgs_1515/Trajectory.h>

namespace msgs_1515
{
template <class ContainerAllocator>
struct BestTrajectory_
{
  typedef BestTrajectory_<ContainerAllocator> Type;

  BestTrajectory_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , waypoints()  {
    }
  BestTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::msgs_1515::Trajectory_<ContainerAllocator>  _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::msgs_1515::BestTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::BestTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct BestTrajectory_

typedef ::msgs_1515::BestTrajectory_<std::allocator<void> > BestTrajectory;

typedef boost::shared_ptr< ::msgs_1515::BestTrajectory > BestTrajectoryPtr;
typedef boost::shared_ptr< ::msgs_1515::BestTrajectory const> BestTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::BestTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::BestTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::BestTrajectory_<ContainerAllocator1> & lhs, const ::msgs_1515::BestTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::BestTrajectory_<ContainerAllocator1> & lhs, const ::msgs_1515::BestTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::BestTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::BestTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::BestTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16261f17f195387c01c9b7e1cf6e7668";
  }

  static const char* value(const ::msgs_1515::BestTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16261f17f195387cULL;
  static const uint64_t static_value2 = 0x01c9b7e1cf6e7668ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/BestTrajectory";
  }

  static const char* value(const ::msgs_1515::BestTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"Trajectory waypoints\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: msgs_1515/Trajectory\n"
"float32 c0\n"
"float32 c1\n"
"float32 c2\n"
"float32 c3\n"
"float32 speed\n"
"float32 xfinal\n"
;
  }

  static const char* value(const ::msgs_1515::BestTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BestTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::BestTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::BestTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "waypoints: ";
    s << std::endl;
    Printer< ::msgs_1515::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_BESTTRAJECTORY_H
