// Generated by gencpp from file msgs_1515/ClusterRadar.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_CLUSTERRADAR_H
#define MSGS_1515_MESSAGE_CLUSTERRADAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace msgs_1515
{
template <class ContainerAllocator>
struct ClusterRadar_
{
  typedef ClusterRadar_<ContainerAllocator> Type;

  ClusterRadar_()
    : header()
    , target_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)
    , DynProp(0.0)
    , std_dev_long_dist(0.0)
    , std_dev_lat_dist(0.0)
    , std_dev_long_vel(0.0)
    , std_dev_lat_vel(0.0)
    , false_alarm_prob(0.0)
    , validty_state(0.0)
    , doppler_state(0.0)
    , static_check(false)  {
    }
  ClusterRadar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , target_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)
    , DynProp(0.0)
    , std_dev_long_dist(0.0)
    , std_dev_lat_dist(0.0)
    , std_dev_long_vel(0.0)
    , std_dev_lat_vel(0.0)
    , false_alarm_prob(0.0)
    , validty_state(0.0)
    , doppler_state(0.0)
    , static_check(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _target_id_type;
  _target_id_type target_id;

   typedef float _longitude_dist_type;
  _longitude_dist_type longitude_dist;

   typedef float _lateral_dist_type;
  _lateral_dist_type lateral_dist;

   typedef float _longitude_vel_type;
  _longitude_vel_type longitude_vel;

   typedef float _lateral_vel_type;
  _lateral_vel_type lateral_vel;

   typedef float _rcs_type;
  _rcs_type rcs;

   typedef float _DynProp_type;
  _DynProp_type DynProp;

   typedef float _std_dev_long_dist_type;
  _std_dev_long_dist_type std_dev_long_dist;

   typedef float _std_dev_lat_dist_type;
  _std_dev_lat_dist_type std_dev_lat_dist;

   typedef float _std_dev_long_vel_type;
  _std_dev_long_vel_type std_dev_long_vel;

   typedef float _std_dev_lat_vel_type;
  _std_dev_lat_vel_type std_dev_lat_vel;

   typedef float _false_alarm_prob_type;
  _false_alarm_prob_type false_alarm_prob;

   typedef float _validty_state_type;
  _validty_state_type validty_state;

   typedef float _doppler_state_type;
  _doppler_state_type doppler_state;

   typedef uint8_t _static_check_type;
  _static_check_type static_check;





  typedef boost::shared_ptr< ::msgs_1515::ClusterRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::ClusterRadar_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterRadar_

typedef ::msgs_1515::ClusterRadar_<std::allocator<void> > ClusterRadar;

typedef boost::shared_ptr< ::msgs_1515::ClusterRadar > ClusterRadarPtr;
typedef boost::shared_ptr< ::msgs_1515::ClusterRadar const> ClusterRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::ClusterRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::ClusterRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::ClusterRadar_<ContainerAllocator1> & lhs, const ::msgs_1515::ClusterRadar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.target_id == rhs.target_id &&
    lhs.longitude_dist == rhs.longitude_dist &&
    lhs.lateral_dist == rhs.lateral_dist &&
    lhs.longitude_vel == rhs.longitude_vel &&
    lhs.lateral_vel == rhs.lateral_vel &&
    lhs.rcs == rhs.rcs &&
    lhs.DynProp == rhs.DynProp &&
    lhs.std_dev_long_dist == rhs.std_dev_long_dist &&
    lhs.std_dev_lat_dist == rhs.std_dev_lat_dist &&
    lhs.std_dev_long_vel == rhs.std_dev_long_vel &&
    lhs.std_dev_lat_vel == rhs.std_dev_lat_vel &&
    lhs.false_alarm_prob == rhs.false_alarm_prob &&
    lhs.validty_state == rhs.validty_state &&
    lhs.doppler_state == rhs.doppler_state &&
    lhs.static_check == rhs.static_check;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::ClusterRadar_<ContainerAllocator1> & lhs, const ::msgs_1515::ClusterRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::ClusterRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::ClusterRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::ClusterRadar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb3e5405dc7c6503c3a17cff308b05b9";
  }

  static const char* value(const ::msgs_1515::ClusterRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb3e5405dc7c6503ULL;
  static const uint64_t static_value2 = 0xc3a17cff308b05b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/ClusterRadar";
  }

  static const char* value(const ::msgs_1515::ClusterRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 target_id\n"
"float32 longitude_dist\n"
"float32 lateral_dist\n"
"float32 longitude_vel\n"
"float32 lateral_vel\n"
"float32 rcs\n"
"float32 DynProp\n"
"float32 std_dev_long_dist\n"
"float32 std_dev_lat_dist\n"
"float32 std_dev_long_vel\n"
"float32 std_dev_lat_vel\n"
"float32 false_alarm_prob\n"
"float32 validty_state\n"
"float32 doppler_state\n"
"bool static_check\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::msgs_1515::ClusterRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.target_id);
      stream.next(m.longitude_dist);
      stream.next(m.lateral_dist);
      stream.next(m.longitude_vel);
      stream.next(m.lateral_vel);
      stream.next(m.rcs);
      stream.next(m.DynProp);
      stream.next(m.std_dev_long_dist);
      stream.next(m.std_dev_lat_dist);
      stream.next(m.std_dev_long_vel);
      stream.next(m.std_dev_lat_vel);
      stream.next(m.false_alarm_prob);
      stream.next(m.validty_state);
      stream.next(m.doppler_state);
      stream.next(m.static_check);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::ClusterRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::ClusterRadar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "target_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_id);
    s << indent << "longitude_dist: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_dist);
    s << indent << "lateral_dist: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_dist);
    s << indent << "longitude_vel: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_vel);
    s << indent << "lateral_vel: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_vel);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
    s << indent << "DynProp: ";
    Printer<float>::stream(s, indent + "  ", v.DynProp);
    s << indent << "std_dev_long_dist: ";
    Printer<float>::stream(s, indent + "  ", v.std_dev_long_dist);
    s << indent << "std_dev_lat_dist: ";
    Printer<float>::stream(s, indent + "  ", v.std_dev_lat_dist);
    s << indent << "std_dev_long_vel: ";
    Printer<float>::stream(s, indent + "  ", v.std_dev_long_vel);
    s << indent << "std_dev_lat_vel: ";
    Printer<float>::stream(s, indent + "  ", v.std_dev_lat_vel);
    s << indent << "false_alarm_prob: ";
    Printer<float>::stream(s, indent + "  ", v.false_alarm_prob);
    s << indent << "validty_state: ";
    Printer<float>::stream(s, indent + "  ", v.validty_state);
    s << indent << "doppler_state: ";
    Printer<float>::stream(s, indent + "  ", v.doppler_state);
    s << indent << "static_check: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.static_check);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_CLUSTERRADAR_H
