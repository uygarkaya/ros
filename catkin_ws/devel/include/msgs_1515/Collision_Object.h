// Generated by gencpp from file msgs_1515/Collision_Object.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_COLLISION_OBJECT_H
#define MSGS_1515_MESSAGE_COLLISION_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_1515
{
template <class ContainerAllocator>
struct Collision_Object_
{
  typedef Collision_Object_<ContainerAllocator> Type;

  Collision_Object_()
    : xPos(0.0)
    , yPos(0.0)
    , speed(0.0)  {
    }
  Collision_Object_(const ContainerAllocator& _alloc)
    : xPos(0.0)
    , yPos(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef float _xPos_type;
  _xPos_type xPos;

   typedef float _yPos_type;
  _yPos_type yPos;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::msgs_1515::Collision_Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::Collision_Object_<ContainerAllocator> const> ConstPtr;

}; // struct Collision_Object_

typedef ::msgs_1515::Collision_Object_<std::allocator<void> > Collision_Object;

typedef boost::shared_ptr< ::msgs_1515::Collision_Object > Collision_ObjectPtr;
typedef boost::shared_ptr< ::msgs_1515::Collision_Object const> Collision_ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::Collision_Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::Collision_Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::Collision_Object_<ContainerAllocator1> & lhs, const ::msgs_1515::Collision_Object_<ContainerAllocator2> & rhs)
{
  return lhs.xPos == rhs.xPos &&
    lhs.yPos == rhs.yPos &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::Collision_Object_<ContainerAllocator1> & lhs, const ::msgs_1515::Collision_Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::Collision_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::Collision_Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::Collision_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::Collision_Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::Collision_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::Collision_Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::Collision_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44b91f6215415f03230f74399b59c2e5";
  }

  static const char* value(const ::msgs_1515::Collision_Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44b91f6215415f03ULL;
  static const uint64_t static_value2 = 0x230f74399b59c2e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::Collision_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/Collision_Object";
  }

  static const char* value(const ::msgs_1515::Collision_Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::Collision_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xPos\n"
"float32 yPos\n"
"float32 speed\n"
;
  }

  static const char* value(const ::msgs_1515::Collision_Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::Collision_Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xPos);
      stream.next(m.yPos);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Collision_Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::Collision_Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::Collision_Object_<ContainerAllocator>& v)
  {
    s << indent << "xPos: ";
    Printer<float>::stream(s, indent + "  ", v.xPos);
    s << indent << "yPos: ";
    Printer<float>::stream(s, indent + "  ", v.yPos);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_COLLISION_OBJECT_H
