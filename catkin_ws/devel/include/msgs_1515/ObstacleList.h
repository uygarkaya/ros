// Generated by gencpp from file msgs_1515/ObstacleList.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_OBSTACLELIST_H
#define MSGS_1515_MESSAGE_OBSTACLELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msgs_1515/Obstacle.h>

namespace msgs_1515
{
template <class ContainerAllocator>
struct ObstacleList_
{
  typedef ObstacleList_<ContainerAllocator> Type;

  ObstacleList_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , measurement_time(0.0)
    , number_of_obstacles(0)
    , obstacles()  {
    }
  ObstacleList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , measurement_time(0.0)
    , number_of_obstacles(0)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef double _measurement_time_type;
  _measurement_time_type measurement_time;

   typedef uint32_t _number_of_obstacles_type;
  _number_of_obstacles_type number_of_obstacles;

   typedef std::vector< ::msgs_1515::Obstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::msgs_1515::Obstacle_<ContainerAllocator> >> _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::msgs_1515::ObstacleList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::ObstacleList_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleList_

typedef ::msgs_1515::ObstacleList_<std::allocator<void> > ObstacleList;

typedef boost::shared_ptr< ::msgs_1515::ObstacleList > ObstacleListPtr;
typedef boost::shared_ptr< ::msgs_1515::ObstacleList const> ObstacleListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::ObstacleList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::ObstacleList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::ObstacleList_<ContainerAllocator1> & lhs, const ::msgs_1515::ObstacleList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.measurement_time == rhs.measurement_time &&
    lhs.number_of_obstacles == rhs.number_of_obstacles &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::ObstacleList_<ContainerAllocator1> & lhs, const ::msgs_1515::ObstacleList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::ObstacleList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::ObstacleList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::ObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::ObstacleList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::ObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::ObstacleList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d166be37a54d9b661f457c17d42d190a";
  }

  static const char* value(const ::msgs_1515::ObstacleList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd166be37a54d9b66ULL;
  static const uint64_t static_value2 = 0x1f457c17d42d190aULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/ObstacleList";
  }

  static const char* value(const ::msgs_1515::ObstacleList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"float64 measurement_time\n"
"uint32 number_of_obstacles\n"
"msgs_1515/Obstacle[] obstacles\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: msgs_1515/Obstacle\n"
"msgs_1515/ObstacleKinematics obstacle_kinematics\n"
"msgs_1515/ObstacleProperties obstacle_properties\n"
"================================================================================\n"
"MSG: msgs_1515/ObstacleKinematics\n"
"std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Accel accel\n"
"geometry_msgs/Vector3 dimensions\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: msgs_1515/ObstacleProperties\n"
"uint8 blinker_info\n"
"uint8 cut_in_and_out\n"
"uint8 obstacle_type\n"
"uint8 obstacle_status\n"
"bool obstacle_brake_lights\n"
"uint8 obstacle_valid\n"
"uint16 obstacle_age\n"
"uint8 obstacle_lane\n"
"bool cipv_flag\n"
"float32 radar_pos_x\n"
"float32 radar_vel_x\n"
"uint8 radar_match_confidence\n"
"uint16 matched_radar_id\n"
"float64 obstacle_scale_change\n"
"bool obstacle_replaced\n"
"uint8 radar_obstacle_id\n"
"uint16 me_obstacle_id\n"
"float32 rcs\n"
"float32 prob_exist\n"
"string obstacle_class\n"
"string dyn_property\n"
"uint8 meas_state\n"
"uint16 track_id\n"
"uint8 track_status\n"
"float64 prbty_exstn\n"
"float64 prbty_prsntn\n"
"float64 prbty_detn\n"
"float64 prbty_clutr\n"
"float64[] covariance\n"
"float64[] R\n"
;
  }

  static const char* value(const ::msgs_1515::ObstacleList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::ObstacleList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.measurement_time);
      stream.next(m.number_of_obstacles);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::ObstacleList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::ObstacleList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "measurement_time: ";
    Printer<double>::stream(s, indent + "  ", v.measurement_time);
    s << indent << "number_of_obstacles: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_obstacles);
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs_1515::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_OBSTACLELIST_H
