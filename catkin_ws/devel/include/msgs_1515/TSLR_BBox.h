// Generated by gencpp from file msgs_1515/TSLR_BBox.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_TSLR_BBOX_H
#define MSGS_1515_MESSAGE_TSLR_BBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_1515
{
template <class ContainerAllocator>
struct TSLR_BBox_
{
  typedef TSLR_BBox_<ContainerAllocator> Type;

  TSLR_BBox_()
    : Class(0)
    , probability(0.0)
    , SpeedSignValue(0)
    , ETA(0.0)  {
    }
  TSLR_BBox_(const ContainerAllocator& _alloc)
    : Class(0)
    , probability(0.0)
    , SpeedSignValue(0)
    , ETA(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _Class_type;
  _Class_type Class;

   typedef double _probability_type;
  _probability_type probability;

   typedef int64_t _SpeedSignValue_type;
  _SpeedSignValue_type SpeedSignValue;

   typedef double _ETA_type;
  _ETA_type ETA;





  typedef boost::shared_ptr< ::msgs_1515::TSLR_BBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::TSLR_BBox_<ContainerAllocator> const> ConstPtr;

}; // struct TSLR_BBox_

typedef ::msgs_1515::TSLR_BBox_<std::allocator<void> > TSLR_BBox;

typedef boost::shared_ptr< ::msgs_1515::TSLR_BBox > TSLR_BBoxPtr;
typedef boost::shared_ptr< ::msgs_1515::TSLR_BBox const> TSLR_BBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::TSLR_BBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::TSLR_BBox_<ContainerAllocator1> & lhs, const ::msgs_1515::TSLR_BBox_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.probability == rhs.probability &&
    lhs.SpeedSignValue == rhs.SpeedSignValue &&
    lhs.ETA == rhs.ETA;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::TSLR_BBox_<ContainerAllocator1> & lhs, const ::msgs_1515::TSLR_BBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::TSLR_BBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::TSLR_BBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::TSLR_BBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad6be840399777361d3c87413b09edbd";
  }

  static const char* value(const ::msgs_1515::TSLR_BBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad6be84039977736ULL;
  static const uint64_t static_value2 = 0x1d3c87413b09edbdULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/TSLR_BBox";
  }

  static const char* value(const ::msgs_1515::TSLR_BBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TSLR Bouinding Boxes\n"
"int64 Class\n"
"float64 probability # between 0 and 1\n"
"# int64 xmin\n"
"# int64 ymin\n"
"# int64 xmax\n"
"# int64 ymax\n"
"# bool IsSpeedSign\n"
"int64 SpeedSignValue\n"
"float64 ETA # second\n"
;
  }

  static const char* value(const ::msgs_1515::TSLR_BBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.probability);
      stream.next(m.SpeedSignValue);
      stream.next(m.ETA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TSLR_BBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::TSLR_BBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::TSLR_BBox_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Class);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "SpeedSignValue: ";
    Printer<int64_t>::stream(s, indent + "  ", v.SpeedSignValue);
    s << indent << "ETA: ";
    Printer<double>::stream(s, indent + "  ", v.ETA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_TSLR_BBOX_H
