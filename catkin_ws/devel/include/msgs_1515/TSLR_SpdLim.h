// Generated by gencpp from file msgs_1515/TSLR_SpdLim.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_TSLR_SPDLIM_H
#define MSGS_1515_MESSAGE_TSLR_SPDLIM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_1515
{
template <class ContainerAllocator>
struct TSLR_SpdLim_
{
  typedef TSLR_SpdLim_<ContainerAllocator> Type;

  TSLR_SpdLim_()
    : speed_limit(0)  {
    }
  TSLR_SpdLim_(const ContainerAllocator& _alloc)
    : speed_limit(0)  {
  (void)_alloc;
    }



   typedef int64_t _speed_limit_type;
  _speed_limit_type speed_limit;





  typedef boost::shared_ptr< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> const> ConstPtr;

}; // struct TSLR_SpdLim_

typedef ::msgs_1515::TSLR_SpdLim_<std::allocator<void> > TSLR_SpdLim;

typedef boost::shared_ptr< ::msgs_1515::TSLR_SpdLim > TSLR_SpdLimPtr;
typedef boost::shared_ptr< ::msgs_1515::TSLR_SpdLim const> TSLR_SpdLimConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator1> & lhs, const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator2> & rhs)
{
  return lhs.speed_limit == rhs.speed_limit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator1> & lhs, const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e29ee14bdb0dbf17f518e9f21a5a195c";
  }

  static const char* value(const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe29ee14bdb0dbf17ULL;
  static const uint64_t static_value2 = 0xf518e9f21a5a195cULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/TSLR_SpdLim";
  }

  static const char* value(const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TSLR Speed limit information. This will be used by ACC in order to limit ego vehicle's speed.\n"
"int64 speed_limit\n"
;
  }

  static const char* value(const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TSLR_SpdLim_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::TSLR_SpdLim_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::TSLR_SpdLim_<ContainerAllocator>& v)
  {
    s << indent << "speed_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_TSLR_SPDLIM_H
