// Generated by gencpp from file msgs_1515/Trajectory.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_TRAJECTORY_H
#define MSGS_1515_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_1515
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)
    , speed(0.0)
    , xfinal(0.0)  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)
    , speed(0.0)
    , xfinal(0.0)  {
  (void)_alloc;
    }



   typedef float _c0_type;
  _c0_type c0;

   typedef float _c1_type;
  _c1_type c1;

   typedef float _c2_type;
  _c2_type c2;

   typedef float _c3_type;
  _c3_type c3;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _xfinal_type;
  _xfinal_type xfinal;





  typedef boost::shared_ptr< ::msgs_1515::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::msgs_1515::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::msgs_1515::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::msgs_1515::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::Trajectory_<ContainerAllocator1> & lhs, const ::msgs_1515::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.c0 == rhs.c0 &&
    lhs.c1 == rhs.c1 &&
    lhs.c2 == rhs.c2 &&
    lhs.c3 == rhs.c3 &&
    lhs.speed == rhs.speed &&
    lhs.xfinal == rhs.xfinal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::Trajectory_<ContainerAllocator1> & lhs, const ::msgs_1515::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63195b550d635a9901faeb6cd8af9747";
  }

  static const char* value(const ::msgs_1515::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63195b550d635a99ULL;
  static const uint64_t static_value2 = 0x01faeb6cd8af9747ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/Trajectory";
  }

  static const char* value(const ::msgs_1515::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 c0\n"
"float32 c1\n"
"float32 c2\n"
"float32 c3\n"
"float32 speed\n"
"float32 xfinal\n"
;
  }

  static const char* value(const ::msgs_1515::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c0);
      stream.next(m.c1);
      stream.next(m.c2);
      stream.next(m.c3);
      stream.next(m.speed);
      stream.next(m.xfinal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "c0: ";
    Printer<float>::stream(s, indent + "  ", v.c0);
    s << indent << "c1: ";
    Printer<float>::stream(s, indent + "  ", v.c1);
    s << indent << "c2: ";
    Printer<float>::stream(s, indent + "  ", v.c2);
    s << indent << "c3: ";
    Printer<float>::stream(s, indent + "  ", v.c3);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "xfinal: ";
    Printer<float>::stream(s, indent + "  ", v.xfinal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_TRAJECTORY_H
