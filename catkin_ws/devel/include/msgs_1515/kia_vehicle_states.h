// Generated by gencpp from file msgs_1515/kia_vehicle_states.msg
// DO NOT EDIT!


#ifndef MSGS_1515_MESSAGE_KIA_VEHICLE_STATES_H
#define MSGS_1515_MESSAGE_KIA_VEHICLE_STATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace msgs_1515
{
template <class ContainerAllocator>
struct kia_vehicle_states_
{
  typedef kia_vehicle_states_<ContainerAllocator> Type;

  kia_vehicle_states_()
    : header()
    , brakePressure()
    , steeringAngle()
    , wheelSpeed()  {
    }
  kia_vehicle_states_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , brakePressure(_alloc)
    , steeringAngle(_alloc)
    , wheelSpeed()  {
  (void)_alloc;
      wheelSpeed.assign( ::std_msgs::Float64_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _brakePressure_type;
  _brakePressure_type brakePressure;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _steeringAngle_type;
  _steeringAngle_type steeringAngle;

   typedef boost::array< ::std_msgs::Float64_<ContainerAllocator> , 4>  _wheelSpeed_type;
  _wheelSpeed_type wheelSpeed;





  typedef boost::shared_ptr< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> const> ConstPtr;

}; // struct kia_vehicle_states_

typedef ::msgs_1515::kia_vehicle_states_<std::allocator<void> > kia_vehicle_states;

typedef boost::shared_ptr< ::msgs_1515::kia_vehicle_states > kia_vehicle_statesPtr;
typedef boost::shared_ptr< ::msgs_1515::kia_vehicle_states const> kia_vehicle_statesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_1515::kia_vehicle_states_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_1515::kia_vehicle_states_<ContainerAllocator1> & lhs, const ::msgs_1515::kia_vehicle_states_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.brakePressure == rhs.brakePressure &&
    lhs.steeringAngle == rhs.steeringAngle &&
    lhs.wheelSpeed == rhs.wheelSpeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_1515::kia_vehicle_states_<ContainerAllocator1> & lhs, const ::msgs_1515::kia_vehicle_states_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_1515

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46eaabf74bdd814e01cd08effd3efb51";
  }

  static const char* value(const ::msgs_1515::kia_vehicle_states_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46eaabf74bdd814eULL;
  static const uint64_t static_value2 = 0x01cd08effd3efb51ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_1515/kia_vehicle_states";
  }

  static const char* value(const ::msgs_1515::kia_vehicle_states_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"std_msgs/Float64 brakePressure\n"
"std_msgs/Float64 steeringAngle\n"
"std_msgs/Float64[4] wheelSpeed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::msgs_1515::kia_vehicle_states_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.brakePressure);
      stream.next(m.steeringAngle);
      stream.next(m.wheelSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kia_vehicle_states_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_1515::kia_vehicle_states_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_1515::kia_vehicle_states_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "brakePressure: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.brakePressure);
    s << indent << "steeringAngle: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.steeringAngle);
    s << indent << "wheelSpeed[]" << std::endl;
    for (size_t i = 0; i < v.wheelSpeed.size(); ++i)
    {
      s << indent << "  wheelSpeed[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.wheelSpeed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_1515_MESSAGE_KIA_VEHICLE_STATES_H
