# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_1515/BayesianList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BayesianList(genpy.Message):
  _md5sum = "27e0bc7354fd5b6934bfa9c612e9bff1"
  _type = "msgs_1515/BayesianList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 Q1
uint8 Q2
uint8 Q3
uint8 Q4
uint8 Q5
uint8 Q6
uint8 Q7
uint8 Q8
uint8 Q9
uint8 Q10"""
  __slots__ = ['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BayesianList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Q1 is None:
        self.Q1 = 0
      if self.Q2 is None:
        self.Q2 = 0
      if self.Q3 is None:
        self.Q3 = 0
      if self.Q4 is None:
        self.Q4 = 0
      if self.Q5 is None:
        self.Q5 = 0
      if self.Q6 is None:
        self.Q6 = 0
      if self.Q7 is None:
        self.Q7 = 0
      if self.Q8 is None:
        self.Q8 = 0
      if self.Q9 is None:
        self.Q9 = 0
      if self.Q10 is None:
        self.Q10 = 0
    else:
      self.Q1 = 0
      self.Q2 = 0
      self.Q3 = 0
      self.Q4 = 0
      self.Q5 = 0
      self.Q6 = 0
      self.Q7 = 0
      self.Q8 = 0
      self.Q9 = 0
      self.Q10 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.Q1, _x.Q2, _x.Q3, _x.Q4, _x.Q5, _x.Q6, _x.Q7, _x.Q8, _x.Q9, _x.Q10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Q1, _x.Q2, _x.Q3, _x.Q4, _x.Q5, _x.Q6, _x.Q7, _x.Q8, _x.Q9, _x.Q10,) = _get_struct_10B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.Q1, _x.Q2, _x.Q3, _x.Q4, _x.Q5, _x.Q6, _x.Q7, _x.Q8, _x.Q9, _x.Q10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Q1, _x.Q2, _x.Q3, _x.Q4, _x.Q5, _x.Q6, _x.Q7, _x.Q8, _x.Q9, _x.Q10,) = _get_struct_10B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
