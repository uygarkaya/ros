# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_1515/ClusterRadarArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import msgs_1515.msg
import std_msgs.msg

class ClusterRadarArray(genpy.Message):
  _md5sum = "3788d9ac9895b49d2a932679c4bf0315"
  _type = "msgs_1515/ClusterRadarArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
ClusterRadar[] clusterRadarArray
float32 nof_targetsnear
float32 nof_targetsfar
float32 meas_counter
float32 interface_version
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: msgs_1515/ClusterRadar
Header header
uint8 target_id
float32 longitude_dist
float32 lateral_dist
float32 longitude_vel
float32 lateral_vel
float32 rcs
float32 DynProp
float32 std_dev_long_dist
float32 std_dev_lat_dist
float32 std_dev_long_vel
float32 std_dev_lat_vel
float32 false_alarm_prob
float32 validty_state
float32 doppler_state
bool static_check"""
  __slots__ = ['header','clusterRadarArray','nof_targetsnear','nof_targetsfar','meas_counter','interface_version']
  _slot_types = ['std_msgs/Header','msgs_1515/ClusterRadar[]','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,clusterRadarArray,nof_targetsnear,nof_targetsfar,meas_counter,interface_version

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClusterRadarArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusterRadarArray is None:
        self.clusterRadarArray = []
      if self.nof_targetsnear is None:
        self.nof_targetsnear = 0.
      if self.nof_targetsfar is None:
        self.nof_targetsfar = 0.
      if self.meas_counter is None:
        self.meas_counter = 0.
      if self.interface_version is None:
        self.interface_version = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.clusterRadarArray = []
      self.nof_targetsnear = 0.
      self.nof_targetsfar = 0.
      self.meas_counter = 0.
      self.interface_version = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.clusterRadarArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusterRadarArray:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B13fB().pack(_x.target_id, _x.longitude_dist, _x.lateral_dist, _x.longitude_vel, _x.lateral_vel, _x.rcs, _x.DynProp, _x.std_dev_long_dist, _x.std_dev_lat_dist, _x.std_dev_long_vel, _x.std_dev_lat_vel, _x.false_alarm_prob, _x.validty_state, _x.doppler_state, _x.static_check))
      _x = self
      buff.write(_get_struct_4f().pack(_x.nof_targetsnear, _x.nof_targetsfar, _x.meas_counter, _x.interface_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusterRadarArray is None:
        self.clusterRadarArray = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusterRadarArray = []
      for i in range(0, length):
        val1 = msgs_1515.msg.ClusterRadar()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 54
        (_x.target_id, _x.longitude_dist, _x.lateral_dist, _x.longitude_vel, _x.lateral_vel, _x.rcs, _x.DynProp, _x.std_dev_long_dist, _x.std_dev_lat_dist, _x.std_dev_long_vel, _x.std_dev_lat_vel, _x.false_alarm_prob, _x.validty_state, _x.doppler_state, _x.static_check,) = _get_struct_B13fB().unpack(str[start:end])
        val1.static_check = bool(val1.static_check)
        self.clusterRadarArray.append(val1)
      _x = self
      start = end
      end += 16
      (_x.nof_targetsnear, _x.nof_targetsfar, _x.meas_counter, _x.interface_version,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.clusterRadarArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusterRadarArray:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B13fB().pack(_x.target_id, _x.longitude_dist, _x.lateral_dist, _x.longitude_vel, _x.lateral_vel, _x.rcs, _x.DynProp, _x.std_dev_long_dist, _x.std_dev_lat_dist, _x.std_dev_long_vel, _x.std_dev_lat_vel, _x.false_alarm_prob, _x.validty_state, _x.doppler_state, _x.static_check))
      _x = self
      buff.write(_get_struct_4f().pack(_x.nof_targetsnear, _x.nof_targetsfar, _x.meas_counter, _x.interface_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusterRadarArray is None:
        self.clusterRadarArray = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusterRadarArray = []
      for i in range(0, length):
        val1 = msgs_1515.msg.ClusterRadar()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 54
        (_x.target_id, _x.longitude_dist, _x.lateral_dist, _x.longitude_vel, _x.lateral_vel, _x.rcs, _x.DynProp, _x.std_dev_long_dist, _x.std_dev_lat_dist, _x.std_dev_long_vel, _x.std_dev_lat_vel, _x.false_alarm_prob, _x.validty_state, _x.doppler_state, _x.static_check,) = _get_struct_B13fB().unpack(str[start:end])
        val1.static_check = bool(val1.static_check)
        self.clusterRadarArray.append(val1)
      _x = self
      start = end
      end += 16
      (_x.nof_targetsnear, _x.nof_targetsfar, _x.meas_counter, _x.interface_version,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B13fB = None
def _get_struct_B13fB():
    global _struct_B13fB
    if _struct_B13fB is None:
        _struct_B13fB = struct.Struct("<B13fB")
    return _struct_B13fB
