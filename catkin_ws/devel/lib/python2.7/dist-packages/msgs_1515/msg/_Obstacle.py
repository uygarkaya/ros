# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_1515/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import msgs_1515.msg
import std_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "3dc5d4ef897e9d201b15e7e0c351f4a7"
  _type = "msgs_1515/Obstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """msgs_1515/ObstacleKinematics obstacle_kinematics
msgs_1515/ObstacleProperties obstacle_properties
================================================================================
MSG: msgs_1515/ObstacleKinematics
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Accel accel
geometry_msgs/Vector3 dimensions

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: msgs_1515/ObstacleProperties
uint8 blinker_info
uint8 cut_in_and_out
uint8 obstacle_type
uint8 obstacle_status
bool obstacle_brake_lights
uint8 obstacle_valid
uint16 obstacle_age
uint8 obstacle_lane
bool cipv_flag
float32 radar_pos_x
float32 radar_vel_x
uint8 radar_match_confidence
uint16 matched_radar_id
float64 obstacle_scale_change
bool obstacle_replaced
uint8 radar_obstacle_id
uint16 me_obstacle_id
float32 rcs
float32 prob_exist
string obstacle_class
string dyn_property
uint8 meas_state
uint16 track_id
uint8 track_status
float64 prbty_exstn
float64 prbty_prsntn
float64 prbty_detn
float64 prbty_clutr
float64[] covariance
float64[] R"""
  __slots__ = ['obstacle_kinematics','obstacle_properties']
  _slot_types = ['msgs_1515/ObstacleKinematics','msgs_1515/ObstacleProperties']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacle_kinematics,obstacle_properties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacle_kinematics is None:
        self.obstacle_kinematics = msgs_1515.msg.ObstacleKinematics()
      if self.obstacle_properties is None:
        self.obstacle_properties = msgs_1515.msg.ObstacleProperties()
    else:
      self.obstacle_kinematics = msgs_1515.msg.ObstacleKinematics()
      self.obstacle_properties = msgs_1515.msg.ObstacleProperties()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacle_kinematics.header.seq, _x.obstacle_kinematics.header.stamp.secs, _x.obstacle_kinematics.header.stamp.nsecs))
      _x = self.obstacle_kinematics.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacle_kinematics.seq, _x.obstacle_kinematics.stamp.secs, _x.obstacle_kinematics.stamp.nsecs))
      _x = self.obstacle_kinematics.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22d6BH2B2fBHd2BH2f().pack(_x.obstacle_kinematics.pose.position.x, _x.obstacle_kinematics.pose.position.y, _x.obstacle_kinematics.pose.position.z, _x.obstacle_kinematics.pose.orientation.x, _x.obstacle_kinematics.pose.orientation.y, _x.obstacle_kinematics.pose.orientation.z, _x.obstacle_kinematics.pose.orientation.w, _x.obstacle_kinematics.twist.linear.x, _x.obstacle_kinematics.twist.linear.y, _x.obstacle_kinematics.twist.linear.z, _x.obstacle_kinematics.twist.angular.x, _x.obstacle_kinematics.twist.angular.y, _x.obstacle_kinematics.twist.angular.z, _x.obstacle_kinematics.accel.linear.x, _x.obstacle_kinematics.accel.linear.y, _x.obstacle_kinematics.accel.linear.z, _x.obstacle_kinematics.accel.angular.x, _x.obstacle_kinematics.accel.angular.y, _x.obstacle_kinematics.accel.angular.z, _x.obstacle_kinematics.dimensions.x, _x.obstacle_kinematics.dimensions.y, _x.obstacle_kinematics.dimensions.z, _x.obstacle_properties.blinker_info, _x.obstacle_properties.cut_in_and_out, _x.obstacle_properties.obstacle_type, _x.obstacle_properties.obstacle_status, _x.obstacle_properties.obstacle_brake_lights, _x.obstacle_properties.obstacle_valid, _x.obstacle_properties.obstacle_age, _x.obstacle_properties.obstacle_lane, _x.obstacle_properties.cipv_flag, _x.obstacle_properties.radar_pos_x, _x.obstacle_properties.radar_vel_x, _x.obstacle_properties.radar_match_confidence, _x.obstacle_properties.matched_radar_id, _x.obstacle_properties.obstacle_scale_change, _x.obstacle_properties.obstacle_replaced, _x.obstacle_properties.radar_obstacle_id, _x.obstacle_properties.me_obstacle_id, _x.obstacle_properties.rcs, _x.obstacle_properties.prob_exist))
      _x = self.obstacle_properties.obstacle_class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obstacle_properties.dyn_property
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BHB4d().pack(_x.obstacle_properties.meas_state, _x.obstacle_properties.track_id, _x.obstacle_properties.track_status, _x.obstacle_properties.prbty_exstn, _x.obstacle_properties.prbty_prsntn, _x.obstacle_properties.prbty_detn, _x.obstacle_properties.prbty_clutr))
      length = len(self.obstacle_properties.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.obstacle_properties.covariance))
      length = len(self.obstacle_properties.R)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.obstacle_properties.R))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacle_kinematics is None:
        self.obstacle_kinematics = msgs_1515.msg.ObstacleKinematics()
      if self.obstacle_properties is None:
        self.obstacle_properties = msgs_1515.msg.ObstacleProperties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obstacle_kinematics.header.seq, _x.obstacle_kinematics.header.stamp.secs, _x.obstacle_kinematics.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_kinematics.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_kinematics.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.obstacle_kinematics.seq, _x.obstacle_kinematics.stamp.secs, _x.obstacle_kinematics.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_kinematics.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_kinematics.frame_id = str[start:end]
      _x = self
      start = end
      end += 217
      (_x.obstacle_kinematics.pose.position.x, _x.obstacle_kinematics.pose.position.y, _x.obstacle_kinematics.pose.position.z, _x.obstacle_kinematics.pose.orientation.x, _x.obstacle_kinematics.pose.orientation.y, _x.obstacle_kinematics.pose.orientation.z, _x.obstacle_kinematics.pose.orientation.w, _x.obstacle_kinematics.twist.linear.x, _x.obstacle_kinematics.twist.linear.y, _x.obstacle_kinematics.twist.linear.z, _x.obstacle_kinematics.twist.angular.x, _x.obstacle_kinematics.twist.angular.y, _x.obstacle_kinematics.twist.angular.z, _x.obstacle_kinematics.accel.linear.x, _x.obstacle_kinematics.accel.linear.y, _x.obstacle_kinematics.accel.linear.z, _x.obstacle_kinematics.accel.angular.x, _x.obstacle_kinematics.accel.angular.y, _x.obstacle_kinematics.accel.angular.z, _x.obstacle_kinematics.dimensions.x, _x.obstacle_kinematics.dimensions.y, _x.obstacle_kinematics.dimensions.z, _x.obstacle_properties.blinker_info, _x.obstacle_properties.cut_in_and_out, _x.obstacle_properties.obstacle_type, _x.obstacle_properties.obstacle_status, _x.obstacle_properties.obstacle_brake_lights, _x.obstacle_properties.obstacle_valid, _x.obstacle_properties.obstacle_age, _x.obstacle_properties.obstacle_lane, _x.obstacle_properties.cipv_flag, _x.obstacle_properties.radar_pos_x, _x.obstacle_properties.radar_vel_x, _x.obstacle_properties.radar_match_confidence, _x.obstacle_properties.matched_radar_id, _x.obstacle_properties.obstacle_scale_change, _x.obstacle_properties.obstacle_replaced, _x.obstacle_properties.radar_obstacle_id, _x.obstacle_properties.me_obstacle_id, _x.obstacle_properties.rcs, _x.obstacle_properties.prob_exist,) = _get_struct_22d6BH2B2fBHd2BH2f().unpack(str[start:end])
      self.obstacle_properties.obstacle_brake_lights = bool(self.obstacle_properties.obstacle_brake_lights)
      self.obstacle_properties.cipv_flag = bool(self.obstacle_properties.cipv_flag)
      self.obstacle_properties.obstacle_replaced = bool(self.obstacle_properties.obstacle_replaced)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_properties.obstacle_class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_properties.obstacle_class = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_properties.dyn_property = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_properties.dyn_property = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.obstacle_properties.meas_state, _x.obstacle_properties.track_id, _x.obstacle_properties.track_status, _x.obstacle_properties.prbty_exstn, _x.obstacle_properties.prbty_prsntn, _x.obstacle_properties.prbty_detn, _x.obstacle_properties.prbty_clutr,) = _get_struct_BHB4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacle_properties.covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacle_properties.R = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacle_kinematics.header.seq, _x.obstacle_kinematics.header.stamp.secs, _x.obstacle_kinematics.header.stamp.nsecs))
      _x = self.obstacle_kinematics.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.obstacle_kinematics.seq, _x.obstacle_kinematics.stamp.secs, _x.obstacle_kinematics.stamp.nsecs))
      _x = self.obstacle_kinematics.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22d6BH2B2fBHd2BH2f().pack(_x.obstacle_kinematics.pose.position.x, _x.obstacle_kinematics.pose.position.y, _x.obstacle_kinematics.pose.position.z, _x.obstacle_kinematics.pose.orientation.x, _x.obstacle_kinematics.pose.orientation.y, _x.obstacle_kinematics.pose.orientation.z, _x.obstacle_kinematics.pose.orientation.w, _x.obstacle_kinematics.twist.linear.x, _x.obstacle_kinematics.twist.linear.y, _x.obstacle_kinematics.twist.linear.z, _x.obstacle_kinematics.twist.angular.x, _x.obstacle_kinematics.twist.angular.y, _x.obstacle_kinematics.twist.angular.z, _x.obstacle_kinematics.accel.linear.x, _x.obstacle_kinematics.accel.linear.y, _x.obstacle_kinematics.accel.linear.z, _x.obstacle_kinematics.accel.angular.x, _x.obstacle_kinematics.accel.angular.y, _x.obstacle_kinematics.accel.angular.z, _x.obstacle_kinematics.dimensions.x, _x.obstacle_kinematics.dimensions.y, _x.obstacle_kinematics.dimensions.z, _x.obstacle_properties.blinker_info, _x.obstacle_properties.cut_in_and_out, _x.obstacle_properties.obstacle_type, _x.obstacle_properties.obstacle_status, _x.obstacle_properties.obstacle_brake_lights, _x.obstacle_properties.obstacle_valid, _x.obstacle_properties.obstacle_age, _x.obstacle_properties.obstacle_lane, _x.obstacle_properties.cipv_flag, _x.obstacle_properties.radar_pos_x, _x.obstacle_properties.radar_vel_x, _x.obstacle_properties.radar_match_confidence, _x.obstacle_properties.matched_radar_id, _x.obstacle_properties.obstacle_scale_change, _x.obstacle_properties.obstacle_replaced, _x.obstacle_properties.radar_obstacle_id, _x.obstacle_properties.me_obstacle_id, _x.obstacle_properties.rcs, _x.obstacle_properties.prob_exist))
      _x = self.obstacle_properties.obstacle_class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obstacle_properties.dyn_property
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BHB4d().pack(_x.obstacle_properties.meas_state, _x.obstacle_properties.track_id, _x.obstacle_properties.track_status, _x.obstacle_properties.prbty_exstn, _x.obstacle_properties.prbty_prsntn, _x.obstacle_properties.prbty_detn, _x.obstacle_properties.prbty_clutr))
      length = len(self.obstacle_properties.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.obstacle_properties.covariance.tostring())
      length = len(self.obstacle_properties.R)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.obstacle_properties.R.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacle_kinematics is None:
        self.obstacle_kinematics = msgs_1515.msg.ObstacleKinematics()
      if self.obstacle_properties is None:
        self.obstacle_properties = msgs_1515.msg.ObstacleProperties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obstacle_kinematics.header.seq, _x.obstacle_kinematics.header.stamp.secs, _x.obstacle_kinematics.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_kinematics.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_kinematics.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.obstacle_kinematics.seq, _x.obstacle_kinematics.stamp.secs, _x.obstacle_kinematics.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_kinematics.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_kinematics.frame_id = str[start:end]
      _x = self
      start = end
      end += 217
      (_x.obstacle_kinematics.pose.position.x, _x.obstacle_kinematics.pose.position.y, _x.obstacle_kinematics.pose.position.z, _x.obstacle_kinematics.pose.orientation.x, _x.obstacle_kinematics.pose.orientation.y, _x.obstacle_kinematics.pose.orientation.z, _x.obstacle_kinematics.pose.orientation.w, _x.obstacle_kinematics.twist.linear.x, _x.obstacle_kinematics.twist.linear.y, _x.obstacle_kinematics.twist.linear.z, _x.obstacle_kinematics.twist.angular.x, _x.obstacle_kinematics.twist.angular.y, _x.obstacle_kinematics.twist.angular.z, _x.obstacle_kinematics.accel.linear.x, _x.obstacle_kinematics.accel.linear.y, _x.obstacle_kinematics.accel.linear.z, _x.obstacle_kinematics.accel.angular.x, _x.obstacle_kinematics.accel.angular.y, _x.obstacle_kinematics.accel.angular.z, _x.obstacle_kinematics.dimensions.x, _x.obstacle_kinematics.dimensions.y, _x.obstacle_kinematics.dimensions.z, _x.obstacle_properties.blinker_info, _x.obstacle_properties.cut_in_and_out, _x.obstacle_properties.obstacle_type, _x.obstacle_properties.obstacle_status, _x.obstacle_properties.obstacle_brake_lights, _x.obstacle_properties.obstacle_valid, _x.obstacle_properties.obstacle_age, _x.obstacle_properties.obstacle_lane, _x.obstacle_properties.cipv_flag, _x.obstacle_properties.radar_pos_x, _x.obstacle_properties.radar_vel_x, _x.obstacle_properties.radar_match_confidence, _x.obstacle_properties.matched_radar_id, _x.obstacle_properties.obstacle_scale_change, _x.obstacle_properties.obstacle_replaced, _x.obstacle_properties.radar_obstacle_id, _x.obstacle_properties.me_obstacle_id, _x.obstacle_properties.rcs, _x.obstacle_properties.prob_exist,) = _get_struct_22d6BH2B2fBHd2BH2f().unpack(str[start:end])
      self.obstacle_properties.obstacle_brake_lights = bool(self.obstacle_properties.obstacle_brake_lights)
      self.obstacle_properties.cipv_flag = bool(self.obstacle_properties.cipv_flag)
      self.obstacle_properties.obstacle_replaced = bool(self.obstacle_properties.obstacle_replaced)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_properties.obstacle_class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_properties.obstacle_class = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_properties.dyn_property = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_properties.dyn_property = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.obstacle_properties.meas_state, _x.obstacle_properties.track_id, _x.obstacle_properties.track_status, _x.obstacle_properties.prbty_exstn, _x.obstacle_properties.prbty_prsntn, _x.obstacle_properties.prbty_detn, _x.obstacle_properties.prbty_clutr,) = _get_struct_BHB4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacle_properties.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacle_properties.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_22d6BH2B2fBHd2BH2f = None
def _get_struct_22d6BH2B2fBHd2BH2f():
    global _struct_22d6BH2B2fBHd2BH2f
    if _struct_22d6BH2B2fBHd2BH2f is None:
        _struct_22d6BH2B2fBHd2BH2f = struct.Struct("<22d6BH2B2fBHd2BH2f")
    return _struct_22d6BH2B2fBHd2BH2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BHB4d = None
def _get_struct_BHB4d():
    global _struct_BHB4d
    if _struct_BHB4d is None:
        _struct_BHB4d = struct.Struct("<BHB4d")
    return _struct_BHB4d
