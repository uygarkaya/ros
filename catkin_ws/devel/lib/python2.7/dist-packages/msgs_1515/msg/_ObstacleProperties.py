# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_1515/ObstacleProperties.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObstacleProperties(genpy.Message):
  _md5sum = "f6834dd076a8cd9f04bc04f672112493"
  _type = "msgs_1515/ObstacleProperties"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 blinker_info
uint8 cut_in_and_out
uint8 obstacle_type
uint8 obstacle_status
bool obstacle_brake_lights
uint8 obstacle_valid
uint16 obstacle_age
uint8 obstacle_lane
bool cipv_flag
float32 radar_pos_x
float32 radar_vel_x
uint8 radar_match_confidence
uint16 matched_radar_id
float64 obstacle_scale_change
bool obstacle_replaced
uint8 radar_obstacle_id
uint16 me_obstacle_id
float32 rcs
float32 prob_exist
string obstacle_class
string dyn_property
uint8 meas_state
uint16 track_id
uint8 track_status
float64 prbty_exstn
float64 prbty_prsntn
float64 prbty_detn
float64 prbty_clutr
float64[] covariance
float64[] R"""
  __slots__ = ['blinker_info','cut_in_and_out','obstacle_type','obstacle_status','obstacle_brake_lights','obstacle_valid','obstacle_age','obstacle_lane','cipv_flag','radar_pos_x','radar_vel_x','radar_match_confidence','matched_radar_id','obstacle_scale_change','obstacle_replaced','radar_obstacle_id','me_obstacle_id','rcs','prob_exist','obstacle_class','dyn_property','meas_state','track_id','track_status','prbty_exstn','prbty_prsntn','prbty_detn','prbty_clutr','covariance','R']
  _slot_types = ['uint8','uint8','uint8','uint8','bool','uint8','uint16','uint8','bool','float32','float32','uint8','uint16','float64','bool','uint8','uint16','float32','float32','string','string','uint8','uint16','uint8','float64','float64','float64','float64','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       blinker_info,cut_in_and_out,obstacle_type,obstacle_status,obstacle_brake_lights,obstacle_valid,obstacle_age,obstacle_lane,cipv_flag,radar_pos_x,radar_vel_x,radar_match_confidence,matched_radar_id,obstacle_scale_change,obstacle_replaced,radar_obstacle_id,me_obstacle_id,rcs,prob_exist,obstacle_class,dyn_property,meas_state,track_id,track_status,prbty_exstn,prbty_prsntn,prbty_detn,prbty_clutr,covariance,R

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleProperties, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.blinker_info is None:
        self.blinker_info = 0
      if self.cut_in_and_out is None:
        self.cut_in_and_out = 0
      if self.obstacle_type is None:
        self.obstacle_type = 0
      if self.obstacle_status is None:
        self.obstacle_status = 0
      if self.obstacle_brake_lights is None:
        self.obstacle_brake_lights = False
      if self.obstacle_valid is None:
        self.obstacle_valid = 0
      if self.obstacle_age is None:
        self.obstacle_age = 0
      if self.obstacle_lane is None:
        self.obstacle_lane = 0
      if self.cipv_flag is None:
        self.cipv_flag = False
      if self.radar_pos_x is None:
        self.radar_pos_x = 0.
      if self.radar_vel_x is None:
        self.radar_vel_x = 0.
      if self.radar_match_confidence is None:
        self.radar_match_confidence = 0
      if self.matched_radar_id is None:
        self.matched_radar_id = 0
      if self.obstacle_scale_change is None:
        self.obstacle_scale_change = 0.
      if self.obstacle_replaced is None:
        self.obstacle_replaced = False
      if self.radar_obstacle_id is None:
        self.radar_obstacle_id = 0
      if self.me_obstacle_id is None:
        self.me_obstacle_id = 0
      if self.rcs is None:
        self.rcs = 0.
      if self.prob_exist is None:
        self.prob_exist = 0.
      if self.obstacle_class is None:
        self.obstacle_class = ''
      if self.dyn_property is None:
        self.dyn_property = ''
      if self.meas_state is None:
        self.meas_state = 0
      if self.track_id is None:
        self.track_id = 0
      if self.track_status is None:
        self.track_status = 0
      if self.prbty_exstn is None:
        self.prbty_exstn = 0.
      if self.prbty_prsntn is None:
        self.prbty_prsntn = 0.
      if self.prbty_detn is None:
        self.prbty_detn = 0.
      if self.prbty_clutr is None:
        self.prbty_clutr = 0.
      if self.covariance is None:
        self.covariance = []
      if self.R is None:
        self.R = []
    else:
      self.blinker_info = 0
      self.cut_in_and_out = 0
      self.obstacle_type = 0
      self.obstacle_status = 0
      self.obstacle_brake_lights = False
      self.obstacle_valid = 0
      self.obstacle_age = 0
      self.obstacle_lane = 0
      self.cipv_flag = False
      self.radar_pos_x = 0.
      self.radar_vel_x = 0.
      self.radar_match_confidence = 0
      self.matched_radar_id = 0
      self.obstacle_scale_change = 0.
      self.obstacle_replaced = False
      self.radar_obstacle_id = 0
      self.me_obstacle_id = 0
      self.rcs = 0.
      self.prob_exist = 0.
      self.obstacle_class = ''
      self.dyn_property = ''
      self.meas_state = 0
      self.track_id = 0
      self.track_status = 0
      self.prbty_exstn = 0.
      self.prbty_prsntn = 0.
      self.prbty_detn = 0.
      self.prbty_clutr = 0.
      self.covariance = []
      self.R = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6BH2B2fBHd2BH2f().pack(_x.blinker_info, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_scale_change, _x.obstacle_replaced, _x.radar_obstacle_id, _x.me_obstacle_id, _x.rcs, _x.prob_exist))
      _x = self.obstacle_class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dyn_property
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BHB4d().pack(_x.meas_state, _x.track_id, _x.track_status, _x.prbty_exstn, _x.prbty_prsntn, _x.prbty_detn, _x.prbty_clutr))
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.covariance))
      length = len(self.R)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.R))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.blinker_info, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_scale_change, _x.obstacle_replaced, _x.radar_obstacle_id, _x.me_obstacle_id, _x.rcs, _x.prob_exist,) = _get_struct_6BH2B2fBHd2BH2f().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.cipv_flag = bool(self.cipv_flag)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_class = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dyn_property = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dyn_property = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.meas_state, _x.track_id, _x.track_status, _x.prbty_exstn, _x.prbty_prsntn, _x.prbty_detn, _x.prbty_clutr,) = _get_struct_BHB4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.R = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6BH2B2fBHd2BH2f().pack(_x.blinker_info, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_scale_change, _x.obstacle_replaced, _x.radar_obstacle_id, _x.me_obstacle_id, _x.rcs, _x.prob_exist))
      _x = self.obstacle_class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dyn_property
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BHB4d().pack(_x.meas_state, _x.track_id, _x.track_status, _x.prbty_exstn, _x.prbty_prsntn, _x.prbty_detn, _x.prbty_clutr))
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.covariance.tostring())
      length = len(self.R)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.R.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.blinker_info, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_scale_change, _x.obstacle_replaced, _x.radar_obstacle_id, _x.me_obstacle_id, _x.rcs, _x.prob_exist,) = _get_struct_6BH2B2fBHd2BH2f().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.cipv_flag = bool(self.cipv_flag)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacle_class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacle_class = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dyn_property = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dyn_property = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.meas_state, _x.track_id, _x.track_status, _x.prbty_exstn, _x.prbty_prsntn, _x.prbty_detn, _x.prbty_clutr,) = _get_struct_BHB4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6BH2B2fBHd2BH2f = None
def _get_struct_6BH2B2fBHd2BH2f():
    global _struct_6BH2B2fBHd2BH2f
    if _struct_6BH2B2fBHd2BH2f is None:
        _struct_6BH2B2fBHd2BH2f = struct.Struct("<6BH2B2fBHd2BH2f")
    return _struct_6BH2B2fBHd2BH2f
_struct_BHB4d = None
def _get_struct_BHB4d():
    global _struct_BHB4d
    if _struct_BHB4d is None:
        _struct_BHB4d = struct.Struct("<BHB4d")
    return _struct_BHB4d
