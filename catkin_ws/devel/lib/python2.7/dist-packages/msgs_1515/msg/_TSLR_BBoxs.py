# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_1515/TSLR_BBoxs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import msgs_1515.msg
import std_msgs.msg

class TSLR_BBoxs(genpy.Message):
  _md5sum = "0dc90c36e2ae03bcd05954534edf078f"
  _type = "msgs_1515/TSLR_BBoxs"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# TSLR Bouinding Boxes
Header header
Header image_header
TSLR_BBox[] bounding_boxes
TSLR_SpdLim SpdLim

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: msgs_1515/TSLR_BBox
# TSLR Bouinding Boxes
int64 Class
float64 probability # between 0 and 1
# int64 xmin
# int64 ymin
# int64 xmax
# int64 ymax
# bool IsSpeedSign
int64 SpeedSignValue
float64 ETA # second

================================================================================
MSG: msgs_1515/TSLR_SpdLim
# TSLR Speed limit information. This will be used by ACC in order to limit ego vehicle's speed.
int64 speed_limit
"""
  __slots__ = ['header','image_header','bounding_boxes','SpdLim']
  _slot_types = ['std_msgs/Header','std_msgs/Header','msgs_1515/TSLR_BBox[]','msgs_1515/TSLR_SpdLim']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_header,bounding_boxes,SpdLim

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TSLR_BBoxs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.bounding_boxes is None:
        self.bounding_boxes = []
      if self.SpdLim is None:
        self.SpdLim = msgs_1515.msg.TSLR_SpdLim()
    else:
      self.header = std_msgs.msg.Header()
      self.image_header = std_msgs.msg.Header()
      self.bounding_boxes = []
      self.SpdLim = msgs_1515.msg.TSLR_SpdLim()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_boxes:
        _x = val1
        buff.write(_get_struct_qdqd().pack(_x.Class, _x.probability, _x.SpeedSignValue, _x.ETA))
      _x = self.SpdLim.speed_limit
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.bounding_boxes is None:
        self.bounding_boxes = None
      if self.SpdLim is None:
        self.SpdLim = msgs_1515.msg.TSLR_SpdLim()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_boxes = []
      for i in range(0, length):
        val1 = msgs_1515.msg.TSLR_BBox()
        _x = val1
        start = end
        end += 32
        (_x.Class, _x.probability, _x.SpeedSignValue, _x.ETA,) = _get_struct_qdqd().unpack(str[start:end])
        self.bounding_boxes.append(val1)
      start = end
      end += 8
      (self.SpdLim.speed_limit,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_boxes:
        _x = val1
        buff.write(_get_struct_qdqd().pack(_x.Class, _x.probability, _x.SpeedSignValue, _x.ETA))
      _x = self.SpdLim.speed_limit
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.bounding_boxes is None:
        self.bounding_boxes = None
      if self.SpdLim is None:
        self.SpdLim = msgs_1515.msg.TSLR_SpdLim()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_boxes = []
      for i in range(0, length):
        val1 = msgs_1515.msg.TSLR_BBox()
        _x = val1
        start = end
        end += 32
        (_x.Class, _x.probability, _x.SpeedSignValue, _x.ETA,) = _get_struct_qdqd().unpack(str[start:end])
        self.bounding_boxes.append(val1)
      start = end
      end += 8
      (self.SpdLim.speed_limit,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qdqd = None
def _get_struct_qdqd():
    global _struct_qdqd
    if _struct_qdqd is None:
        _struct_qdqd = struct.Struct("<qdqd")
    return _struct_qdqd
